const express=require("express"),app=express(),port=3e3,bodyParser=require("body-parser"),cors=require("cors"),mongoose=require("mongoose"),bcrypt=require("bcryptjs"),fs=require("fs"),multer=require("multer"),config=require("./config.json"),Users=require("./models/users"),Listings=require("./models/listings"),Comments=require("./models/comments");mongoose.connect(`mongodb+srv://${config.MONGO_USERNAME}:${config.MONGO_PASSWORD}@${config.CLUSTER_NAME}.mongodb.net/${config.TABLE_NAME}?retryWrites=true&w=majority`,{useNewUrlParser:!0,useUnifiedTopology:!0});const db=mongoose.connection;db.on("error",console.error.bind(console,"connection error:")),db.once("open",()=>{console.log("we are connected mongo db")});const storage=multer.diskStorage({destination:(e,o,n)=>{n(null,"./uploads")},filename:(e,o,n)=>{n(null,`${Date.now()}-${o.originalname}`)}}),filterFile=(e,o,n)=>{"image/jpeg"===o.mimetype||"image/png"===o.mimetype?n(null,!0):(e.validationError="invalid extension",n(null,!1,e.validationError))},upload=multer({storage:storage,fileFilter:filterFile});app.use(bodyParser.json()),app.use(bodyParser.urlencoded({extended:!1})),app.use(cors()),app.use("/uploads",express.static("uploads")),app.use((e,o,n)=>{console.log(`${e.method} request for ${e.url}`),n()}),app.get("/",(e,o)=>{o.send("Welcome to our Pop Culture Merchandise Niche Market App")}),app.post("/registerUser",(e,o)=>{const n=bcrypt.hashSync(e.body.password);new Users({_id:new mongoose.Types.ObjectId,name:e.body.name,address:e.body.address,username:e.body.username,password:n,email:e.body.email,dob:e.body.dob,registerDate:e.body.registerDate}).save().then(e=>{o.send(e)}).catch(e=>o.send(e))}),app.post("/newListing",upload.single("filePath"),(e,o)=>{console.log(e.body),console.log(e.file);const n=new Listings({_id:new mongoose.Types.ObjectId,title:e.body.title,description:e.body.description,price:e.body.price,filePath:e.file.path,originalName:e.body.originalName,uploaderId:e.body.userId});console.log("test 1"),n.save().then(e=>{console.log("test 2"),o.send(e)}).catch(e=>{console.log("test 3"),o.send(e)})}),app.post("/addAComment",(e,o)=>{new Comments({_id:new mongoose.Types.ObjectId,commentUsername:e.body.commentUsername,commentText:e.body.commentText,commentDate:e.body.commentDate,commentReply:{reply:e.body.reply,replyId:e.body.replyId},commentUserId:e.body.userId,listingId:e.body.listingId}).save().then(e=>{o.send(e)}).catch(e=>o.send(e))}),app.get("/home",(e,o)=>{Listings.find().then(e=>{let n=[];n.push(e[Math.floor(Math.random()*e.length)]),e.map((e,o)=>{o<8&&n.push(e)}),o.send(n)}).catch(e=>{console.log(e),o.send(e)})}),app.post("/login",(e,o)=>{Users.findOne({username:e.body.username},(n,s)=>{s?bcrypt.compareSync(e.body.password,s.password)?o.send(s):o.send("Invalid Password"):o.send("Invalid Username")})}),app.get("/allListings",(e,o)=>{Listings.find().then(e=>{o.send(e)})}),app.post("/product",(e,o)=>{Listings.findById(e.body.id,(e,n)=>{o.send(n)}).catch(e=>{o.send("Can not find that item")})}),app.post("/getComment",(e,o)=>{Comments.findById(e.body.id,(e,n)=>{o.send(n)}).catch(e=>{o.send("Can not find that item")})}),app.post("/comments",(e,o)=>{Comments.find().then(n=>{let s=[];n.map(o=>{o.listingId==e.body.listingId&&s.push(o)}),s.length>0?o.send(s):o.send("No comments found")})}),app.patch("/updateListing",(e,o)=>{const n=e.body.id;Listings.findById(n,(s,t)=>{if(t.user_id==e.body.userId){const s={title:e.body.name,description:e.body.price,price:e.body.price};Listings.updateOne({_id:n},s).then(e=>{o.send(e)}).catch(e=>o.send(e))}else o.send("401")}).catch(e=>o.send("cannot find listing with that id"))}),app.delete("/deleteListing",(e,o)=>{Listings.deleteOne({_id:e.body.id},e=>{e?o.send("failed to delete"):o.send("deleted")})}),app.patch("/updateComment",(e,o)=>{const n=e.body.commentId;Comments.findById(n,(s,t)=>{if(t.commentUserId==e.body.userId){const s={commentText:e.body.text};Comments.updateOne({_id:n},s).then(e=>{o.send(e)}).catch(e=>o.send(e))}else o.send("401")}).catch(e=>o.send("cannot find comment with that id"))}),app.delete("/deleteComment",(e,o)=>{const n=e.body.commentId;Comments.findById(n,(s,t)=>{t?t.listingId==e.body.listingId&&t.commentUserId==e.body.userId?Comments.deleteOne({id:n},e=>{e?o.send("Failed to delete comment"):o.send("Comment deleted")}):o.send("You dont have permission to delete this comment"):o.send("No comment found")})}),app.listen(3e3,()=>{console.log("application is running on port 3000")});