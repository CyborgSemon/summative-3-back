const express=require("express"),app=express(),port=3e3,bodyParser=require("body-parser"),cors=require("cors"),mongoose=require("mongoose"),bcrypt=require("bcryptjs"),fs=require("fs"),multer=require("multer"),config=require("./config.json"),Users=require("./models/users"),Listings=require("./models/listings"),Comments=require("./models/comments");mongoose.connect(`mongodb+srv://${config.MONGO_USERNAME}:${config.MONGO_PASSWORD}@${config.CLUSTER_NAME}.mongodb.net/${config.TABLE_NAME}?retryWrites=true&w=majority`,{useNewUrlParser:!0,useUnifiedTopology:!0});const db=mongoose.connection;db.on("error",console.error.bind(console,"connection error:")),db.once("open",()=>{console.log("we are connected mongo db")});const storage=multer.diskStorage({destination:(e,n,o)=>{o(null,"./uploads")},filename:(e,n,o)=>{o(null,`${Date.now()}-${n.originalname}`)}}),filterFile=(e,n,o)=>{"image/jpeg"===n.mimetype||"image/png"===n.mimetype?o(null,!0):(e.validationError="invalid extension",o(null,!1,e.validationError))},upload=multer({storage:storage,fileFilter:filterFile});app.use(bodyParser.json()),app.use(bodyParser.urlencoded({extended:!1})),app.use(cors()),app.use("/uploads",express.static("uploads")),app.use((e,n,o)=>{console.log(`${e.method} request for ${e.url}`),o()}),app.get("/",(e,n)=>{n.send("Welcome to our Pop Culture Merchandise Niche Market App")}),app.post("/registerUser",(e,n)=>{const o=bcrypt.hashSync(e.body.password);new Users({_id:new mongoose.Types.ObjectId,name:e.body.name,address:e.body.address,username:e.body.username,password:o,email:e.body.email,dob:e.body.dob,registerDate:e.body.registerDate}).save().then(e=>{n.send(e)}).catch(e=>n.send(e))}),app.post("/newListing",upload.single("filePath"),(e,n)=>{new Listings({_id:new mongoose.Types.ObjectId,title:e.body.title,description:e.body.description,price:e.body.price,filePath:e.file.path,originalName:e.body.originalName,uploaderId:e.body.userId}).save().then(e=>{n.send(e)}).catch(e=>n.send(e))}),app.post("/addAComment",(e,n)=>{let o=JSON.parse(e.body.data);new Comments({_id:new mongoose.Types.ObjectId,listingId:o.listingId,commentUsername:o.commentUsername,commentText:o.commentText,commentDate:o.commentDate,commentUserId:o.commentUserId,commentReply:{reply:o.reply,replyUsername:o.replyUsername,replyText:o.replyText,replyDate:o.replyDate,replyUserId:o.replyUserId}}).save().then(e=>{n.send(e)}).catch(e=>n.send(e))}),app.get("/home",(e,n)=>{Listings.find().then(e=>{let o=[];o.push(e[Math.floor(Math.random()*e.length)]),e.map((e,n)=>{n<8&&o.push(e)}),n.send(o)}).catch(e=>{console.log(e),n.send(e)})}),app.post("/login",(e,n)=>{Users.findOne({username:e.body.username},(o,s)=>{s?bcrypt.compareSync(e.body.password,s.password)?n.send(s):n.send("Invalid Password"):n.send("Invalid Username")})}),app.get("/allListings",(e,n)=>{Listings.find().then(e=>{n.send(e)})}),app.post("/product",(e,n)=>{let o={};Listings.findById(e.body.id,(s,t)=>{Users.findById(t.uploaderId,(s,d)=>{o.uploaderName=d.username,Comments.find().then(s=>{if(s.length>0){let n=[];s.map(o=>{o.listingId==e.body.id&&n.push(o)}),n.length>0?o.comments=n:o.comments="No comments found"}else o.comments="No comments found";o.info=t,n.send(o)})}).catch(e=>{n.send("Can not find the user who uploaded this listing")})}).catch(e=>{n.send("Can not find that item")})}),app.patch("/updateListing",(e,n)=>{const o=e.body.id;Listings.findById(o,(s,t)=>{if(t.user_id==e.body.userId){const s={title:e.body.name,description:e.body.description,price:e.body.price};Listings.updateOne({_id:o},s).then(e=>{n.send(e)}).catch(e=>n.send(e))}else n.send("401")}).catch(e=>n.send("cannot find listing with that id"))}),app.patch("/addReply",(e,n)=>{let o=JSON.parse(e.body.data);const s=o.commentId;Comments.findById(s,(e,t)=>{const d={commentReply:{reply:!0,replyUsername:o.replyUsername,replyText:o.replyText,replyDate:o.replyDate,replyUserId:o.replyUserId}};Comments.updateOne({_id:s},d).then(e=>{n.send(e)}).catch(e=>n.send(e))}).catch(e=>n.send("cannot find comment with that id"))}),app.delete("/deleteListing",(e,n)=>{const o=e.body.id;Listings.findById(o,(s,t)=>{t?e.body.userId==t.uploaderId?(Listings.deleteOne({_id:e.body.id},e=>{e?n.send("failed to delete"):n.send("deleted")}),Comments.deleteMany({listingId:o},e=>{e?console.log("Comments failed to delete"):console.log("All comments were deleted")})):n.send("Permission denied"):n.send("No listing found")})}),app.delete("/deleteComment",(e,n)=>{const o=e.body.commentId;Comments.findById(o,(s,t)=>{t?t.listingId==e.body.listingId&&t.commentUserId==e.body.userId?Comments.deleteOne({id:o},e=>{e?n.send("Failed to delete comment"):n.send("Comment deleted")}):n.send("You dont have permission to delete this comment"):n.send("No comment found")})}),app.listen(3e3,()=>{console.log("application is running on port 3000")});